package com.cnksi.kcore.jfinal.model;

import java.sql.SQLException;
import java.util.List;

import com.cnksi.kconf.model.ModelFieldRole;
import com.cnksi.kconf.model.Role;
import com.cnksi.kconf.model.User;
import com.cnksi.kcore.utils.CollectionKit;
import com.cnksi.taglib.KDataCache;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class KModel extends BaseModel<KModel> {
	public static final KModel me = new KModel();
	String fieldTableName = KModelField.me.getTableName();

	public KModel() {
		super();
	}

	public List<KModelField> getField() {
		String sql = "select * from " + fieldTableName + " where mid = ?  and enabled=0 order by list_sort asc";
		return KModelField.me.find(sql, getLong("mid"));
	}

	public List<KModelField> getFieldsByRole(String roleid) {
		String cacheKey = "cache_kmodel_field_roleid_" + roleid;
		List<KModelField> datas = KDataCache.get(cacheKey);
		if (datas == null) {
			StringBuilder sql = new StringBuilder("select * from " + fieldTableName + " where mid = ?  and enabled=0 ");
			sql.append("and mfid in ( select mfid from " + ModelFieldRole.me.tableName + " where rid = ? and enabled = 0) order by list_sort asc");
			datas = KModelField.me.find(sql.toString(), getPkVal(), roleid);
			KDataCache.put(cacheKey, datas);
		}
		return datas;
	}

	public List<KModelField> getListViewField(User loginUser) {
		if (loginUser == null || loginUser.getRole() == null) {
			return KModelField.me.find("select * from " + fieldTableName + " where mid = ?  and enabled=0 and list_view ='true' order by list_sort asc", getLong(pkName));
		} else {
			Long rid = loginUser.getRole().getLong(Role.me.pkName);
			return KModelField.me.find("select * from " + fieldTableName + " where mid = ?  and enabled=0 and list_view ='true' and mfid in ( select mfid from " + ModelFieldRole.me.tableName + " where rid = ? ) order by list_sort asc", getLong(pkName), rid);
		}
	}

	/**
	 * 根据角色查询列表搜索条件
	 * 
	 * @param loginUser
	 * @return
	 */
	public List<KModelField> getListSearchViewField(User loginUser) {
		if (loginUser == null || loginUser.getRole() == null) {
			return KModelField.me.find("select * from " + fieldTableName + " where mid = ?  and enabled=0 and length(list_search_op)>0 order by list_search_sort asc", getLong(pkName));
		} else {
			Long rid = loginUser.getRole().getLong(Role.me.pkName);
			return KModelField.me.find("select * from " + fieldTableName + " where mid = ?  and enabled=0 and length(list_search_op)>0 and mfid in ( select mfid from " + ModelFieldRole.me.tableName + " where rid = ? and enabled = 0 ) order by list_search_sort asc", getLong(pkName), rid);
		}
	}

	public List<KModelField> getFormViewField() {
		return KModelField.me.find("select * from " + fieldTableName + " where mid = ?  and enabled=0 and form_view = 'true' order by form_sort asc", getLong(pkName));
	}

	public List<KModel> findAll() {
		String sql = "select * from " + tableName + " where enabled=0";
		return find(sql);
	}

	public String getMname(long mid) {
		return KModel.me.findById(mid).getStr("mname");
	}

	public Object paginate(Integer pageNumber, int pageSize) {
		return paginate(pageNumber, pageSize, "select *", "from " + tableName + " order by " + pkName + " desc");
	}

	/**
	 * 查询该model下的字段
	 * 
	 * @param mid
	 * @return
	 */
	public List<KModelField> getFields(String mid) {
		String sql = "select * from " + KModelField.me.getTableName() + " where mid = ? and enabled=0";
		return KModelField.me.find(sql, mid);
	}

	/**
	 * 根据mid和角色查询模型字段名称
	 * 
	 * @param tableName
	 * @return
	 */
	public String findFieldNamesByTableName(Long mid, Long rid) {
		String sql = "select group_concat(field_name) from " + KModelField.me.tableName + " where mid=? and mfid in (select mfid from " + ModelFieldRole.me.tableName + " where rid=? and mid = ?) ";
		return Db.queryStr(sql, mid, rid, mid);
	}

	/**
	 * 根据表名查询模型配置
	 * 
	 * @param tableName
	 * @return
	 */
	public KModel findByTableName(String tblName) {
		String sql = "select * from " + tableName + " where mtable = ?  and enabled = 0";
		return findFirst(sql, tblName);
	}

	public KModel findByTableName(String table, String tableAlias) {
		String sql = sql("select * from ", tableName, " where mtable = ? and mtable2 = ?");
		return findFirst(sql, table, tableAlias);
	}

	/**
	 * 复制模型配置及字段配置
	 * 
	 * @param @param
	 *            modelId 模型id @return boolean @throws
	 */
	public boolean copyKModelAndFields(String modelId) {
		boolean result = Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException {
				KModel model = findById(modelId);
				boolean result2 = model.set("mname", model.getStr("mname") + "2").setPkVal(-100).save();

				// 复制field配置
				List<KModelField> fields = KModelField.me.findListByPropertitys(new String[] { "mid", "enabled" }, new Object[] { modelId, "0" }, Logical.AND);
				if (CollectionKit.notEmpty(fields))
					fields.forEach(field -> field.set("mid", model.getPkVal()).setPkVal(-100).save());

				return result2;
			}
		});
		return result;
	}

	@Override
	@SuppressWarnings("rawtypes")
	protected Class getCls() {
		return this.getClass();
	}

}
