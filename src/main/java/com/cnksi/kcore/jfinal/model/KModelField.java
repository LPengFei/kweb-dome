package com.cnksi.kcore.jfinal.model;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;

import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class KModelField extends BaseModel<KModelField> {
	public static final KModelField me = new KModelField();
	private Setting setting;

	public List<KModelField> findByMid(String mid) {
		String sql = "select * from %s where mid=? and enabled= 0 order by list_sort asc ";
		return find(String.format(sql, getTableName()), mid);
	}

	public class Setting{
		private JSONObject listview;
		private JSONObject formview;
		private JSONObject dataconfig;
		
		public JSONObject getListview() {
			return getJSONObjectIfEmpty(listview);
		}
		public void setListview(JSONObject listview) {
			this.listview = listview;
		}
		public JSONObject getFormview() {
			return getJSONObjectIfEmpty(formview);
		}
		public void setFormview(JSONObject formview) {
			this.formview = formview;
		}
		public JSONObject getDataconfig() {
			return getJSONObjectIfEmpty(dataconfig);
		}
		public void setDataconfig(JSONObject dataconfig) {
			this.dataconfig = dataconfig;
		}

		/** 
		 * 如果seting为空，返回new JSONObject()
		 */
		private JSONObject getJSONObjectIfEmpty(JSONObject setting) {
			return setting == null ? new JSONObject() : setting;			
		}
		
		public Setting() {
			JSONObject setting = settingsToMap();
			 
			if(setting != null && !setting.isEmpty()){
				listview = setting.getJSONObject("listview");
				formview = setting.getJSONObject("formview");
				dataconfig = setting.getJSONObject("dataconfig");
			}else{
				listview = new JSONObject();
				formview = new JSONObject();
				dataconfig = new JSONObject();
			}
		}
		
		public boolean isEmpty(){
			return listview.isEmpty() && formview.isEmpty() && dataconfig.isEmpty();
		}
		
		
		/** 
		 * 将Setting对象重新设置到ConfModelField中
		 * @return void    返回类型
		 * @throws 
		 */
		public void setToField(){
			Object settingObj = get("settings");
			if(settingObj == null){
				throw new RuntimeException("setting is null or setting is not JSONObject");
			}
			
			JSONObject setting = (JSONObject) settingObj;
			setting.put("listSetting", listview);
			setting.put("formSetting", formview);
			setting.put("dataSetting", dataconfig);
		}
		
	}
	
	// 新增字段
	// ALTER TABLE `ess`.`conf_model` ADD COLUMN `a` VARCHAR(255) NULL COMMENT 'comm' AFTER `remark`;
	public boolean addColumn(KModelField field) {

		KModel table = KModel.me.findById(field.getStr("mid"));
		String alterSql = String.format("ALTER TABLE %s ADD COLUMN %s %s NULL  COMMENT '%s';", table.get("mtable"), field.get("field_name"), field.get("type"), field.get("field_alias"));
		System.out.println(alterSql);
		return Db.update(alterSql) > 0;

	}

	/**
	 * 
	 * @return 
	 * 将setting json转换成map
	 * @return void    返回类型 
	 * @throws 
	 */
	public JSONObject settingsToMap(){
//		System.out.println("字段 setting: "+getStr("field_name"));
		if(StrKit.isBlank(get("settings"))) return null;
		
		JSONObject jsonObject = JSON.parseObject(get("settings"));
		set("settings", jsonObject);
		
		return jsonObject;
	}
	
	public Setting getSettings(){
		if (Objects.isNull(this.setting)) {
			this.setting = new Setting();
		}
		return this.setting;
	}
	
	public Map<String, String> getFieldLookups(){
		return get("lookups");
	}
	
	@Override
	protected Class<? extends KModelField> getCls() {
		return this.getClass();
	}
	
}
