package com.cnksi.generator.tpl;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import com.jfinal.kit.LogKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.generator.TableMeta;

/**
 * 路由配置
 * 
 * @author joe
 *
 */
public class RouteKitGenerator {
	protected String packageTemplate = "package %s;%n%n";
	protected String importTemplate = "import com.jfinal.config.Routes;%n%n";
	protected String classDefineTemplate = "/**%n" + " * Generated by JFinal, do not modify this file.%n" + " * <pre>%n" + " * Example:%n" + " * public void configRoute(Routes me) {%n" + " *    _RouteKit.mapping(me);" + " %n * \t} %n </pre>%n" + " */%n" + "public class %s {%n%n";
	protected String mappingMethodDefineTemplate = "\tpublic static void mapping(Routes me) {%n";
	protected String mappingMethodContentTemplate = "\t\tme.add(\"/app/%s\",  %sController.class,\"/%s\");%n";

	// me.add("/user", UserController.class, "/user");

	protected String compositeKeyTemplate = "\t\t// Composite Primary Key order: %s%n";

	protected String mappingKitPackageName;
	protected String mappingKitOutputDir;
	protected String mappingKitClassName = "_RouteKit";

	public RouteKitGenerator(String mappingKitPackageName, String mappingKitOutputDir) {
		this.mappingKitPackageName = mappingKitPackageName;
		this.mappingKitOutputDir = mappingKitOutputDir;
	}

	public void setMappingKitOutputDir(String mappingKitOutputDir) {
		if (StrKit.notBlank(mappingKitOutputDir))
			this.mappingKitOutputDir = mappingKitOutputDir;
	}

	public void setMappingKitPackageName(String mappingKitPackageName) {
		if (StrKit.notBlank(mappingKitPackageName))
			this.mappingKitPackageName = mappingKitPackageName;
	}

	public void setMappingKitClassName(String mappingKitClassName) {
		if (StrKit.notBlank(mappingKitClassName))
			this.mappingKitClassName = StrKit.firstCharToUpperCase(mappingKitClassName);
	}

	public void generate(List<TableMeta> tableMetas) {
		System.out.println("Generate MappingKit file ...");
		StringBuilder ret = new StringBuilder();
		genPackage(ret);
		genImport(ret);
		genClassDefine(ret);
		genMappingMethod(tableMetas, ret);
		ret.append(String.format("}%n%n"));
		wirtToFile(ret);
	}

	protected void genPackage(StringBuilder ret) {
		ret.append(String.format(packageTemplate, mappingKitPackageName));
	}

	protected void genImport(StringBuilder ret) {
		ret.append(String.format(importTemplate));
	}

	protected void genClassDefine(StringBuilder ret) {
		ret.append(String.format(classDefineTemplate, mappingKitClassName, mappingKitClassName));
	}

	protected void genMappingMethod(List<TableMeta> tableMetas, StringBuilder ret) {
		ret.append(String.format(mappingMethodDefineTemplate));
		for (TableMeta tableMeta : tableMetas) {
			if (!StrKit.isBlank(tableMeta.primaryKey)) {
				boolean isCompositPrimaryKey = tableMeta.primaryKey.contains(",");
				if (isCompositPrimaryKey)
					ret.append(String.format(compositeKeyTemplate, tableMeta.primaryKey));
				String add = String.format(mappingMethodContentTemplate, tableMeta.modelName.toLowerCase(), tableMeta.modelName, tableMeta.modelName.toLowerCase());
				ret.append(add);
			}
		}
		ret.append(String.format("\t}%n"));
	}

	/**
	 * _MappingKit.java 覆盖写入
	 */
	protected void wirtToFile(StringBuilder ret) {
		FileWriter fw = null;
		try {
			File dir = new File(mappingKitOutputDir);
			if (!dir.exists())
				dir.mkdirs();

			String target = mappingKitOutputDir + File.separator + mappingKitClassName + ".java";
			fw = new FileWriter(target);
			fw.write(ret.toString());
		} catch (IOException e) {
			throw new RuntimeException(e);
		} finally {
			if (fw != null)
				try {
					fw.close();
				} catch (IOException e) {
					LogKit.error(e.getMessage(), e);
				}
		}
	}
}
