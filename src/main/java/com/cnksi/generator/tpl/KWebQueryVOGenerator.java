package com.cnksi.generator.tpl;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.generator.ColumnMeta;
import com.jfinal.plugin.activerecord.generator.TableMeta;

public class KWebQueryVOGenerator {

	protected String packageTemplate = "package %s;%n%n";
	protected String importTemplate = "import %s.%s;%n%n";
	protected String classDefineTemplate = "/**%n" + " * Generated by JFinal.%n" + " */%n" + "@KQuery(select = \"SELECT * \" ,from =\" from %s  \") %n" + "public class %sQuery extends KWebQueryVO {%n";

	protected String queryvoPackageName;
	protected String queryvoOutputDir;

	public KWebQueryVOGenerator(String queryvoPackageName, String queryvoOutputDir) {
		if (StrKit.isBlank(queryvoPackageName))
			throw new IllegalArgumentException("queryvoPackageName can not be blank.");
		if (StrKit.isBlank(queryvoOutputDir))
			throw new IllegalArgumentException("queryvoOutputDir can not be blank.");

		this.queryvoPackageName = queryvoPackageName;
		this.queryvoOutputDir = queryvoOutputDir;
	}

	public void generate(List<TableMeta> tableMetas) {
		System.out.println("Generate queryvo ...");

		for (TableMeta tableMeta : tableMetas) {
			if (!StrKit.isBlank(tableMeta.primaryKey)) {
				genQueryvoContent(tableMeta);
			}
		}
		wirtToFile(tableMetas);
	}

	protected void genQueryvoContent(TableMeta tableMeta) {
		StringBuilder ret = new StringBuilder();
		genPackage(ret);
		genImport(tableMeta, ret);
		genClassDefine(tableMeta, ret);
		// genDao(tableMeta, ret);
		ret.append(String.format("}%n"));
		tableMeta.modelContent = ret.toString();
	}

	protected void genPackage(StringBuilder ret) {
		ret.append(String.format(packageTemplate, queryvoPackageName));
	}

	protected void genImport(TableMeta tableMeta, StringBuilder ret) {
		// ret.append(String.format(importTemplate, baseModelPackageName, tableMeta.baseModelName));
		ret.append(String.format("import com.cnksi.kcore.web.KWebQueryVO; %n"));
		ret.append(String.format("import com.cnksi.kcore.web.api.KQuery; %n"));
		// ret.append(String.format("import com.cnksi.kcore.web.api.KQueryParam; %n"));
	}

	protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {

		ret.append(String.format(classDefineTemplate, tableMeta.name, tableMeta.modelName));

		// 如果数据库中含有enabled字段,则添加enabled=0查询条件
		boolean hasEnabled = false;
		for (ColumnMeta colMeta : tableMeta.columnMetas) {
			if (colMeta.name.equals("enabled")) {
				hasEnabled = true;
				break;
			}
		}
		if (hasEnabled) {
			ret.append(String.format("%n\t public %sQuery() { %n", tableMeta.modelName));
			ret.append(String.format("\t\t addFilter(\" enabled=0 \"); %n"));
			ret.append(String.format("\t } %n"));
		}
	}

	protected void wirtToFile(List<TableMeta> tableMetas) {
		try {
			for (TableMeta tableMeta : tableMetas) {
				if (!StrKit.isBlank(tableMeta.primaryKey)) {
					wirtToFile(tableMeta);
				}
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * 若 vo 文件存在，则不生成，以免覆盖用户手写的代码
	 */
	protected void wirtToFile(TableMeta tableMeta) throws IOException {
		File dir = new File(queryvoOutputDir);
		if (!dir.exists())
			dir.mkdirs();

		String target = queryvoOutputDir + File.separator + tableMeta.modelName + "Query.java";

		File file = new File(target);
		if (file.exists()) {
			return; // 若 Model 存在，不覆盖
		}

		FileWriter fw = new FileWriter(file);
		try {
			fw.write(tableMeta.modelContent);
		} finally {
			fw.close();
		}
	}
}
