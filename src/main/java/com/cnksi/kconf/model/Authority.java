package com.cnksi.kconf.model;

import java.lang.annotation.Annotation;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import com.cnksi.kcore.jfinal.model.BaseModel;
import com.jfinal.ext.plugin.annotation.KRequiresPermissions;
import com.jfinal.plugin.activerecord.Db;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Authority extends BaseModel<Authority> {

	public static final Authority me = new Authority();

	@SuppressWarnings("rawtypes")
	@Override
	protected Class getCls() {
		return this.getClass();
	}

	/**
	 * 查询所有父级权限
	 * 
	 * @return
	 */
	public List<Authority> findParentResouce() {
		String sql = String.format("select * from %s where paid is null and enabled = 0 ", tableName);
		return me.find(sql);
	}

	/**
	 * 查询当前资源的子集权限
	 * 
	 * @return
	 */
	public List<Authority> getChildAuthority() {
		String sql = String.format("select * from %s where paid = ? and enabled = 0 ", tableName);
		return me.find(sql, getLong(pkName));
	}

	/*
	 * 查询Role下的资源
	 */
	public List<Authority> findByRoleid(Object rid) {
		String sql = String.format("select * from %s where aid in (select aid from %s where rid = ? and enabled=0 )", tableName, RoleAuthority.me.getTableName());
		return me.find(sql, rid);
	}

	public Authority insert(String aname, String aurl, Object paid) {
		Authority record =  me.findFirst("select aname from k_authority where aname = ? and enabled = 0",aname);
		if (record == null && aurl.length() > 0) {
			record = new Authority();
			record.set("aurl", aurl);
			record.set("aname", aname);
			record.set("paid", paid);
			record.set("aid", -100);
			record.set("enabled", 0);
			record.save();
		}
		return record;
	}

	public void insert(List<Annotation> controllerAnnotations, List<Annotation> methodAnnotations, String controllerdKey, String methodKey) {
		if (0 == controllerAnnotations.size() && methodAnnotations.size() == 0) {
			return;
		}
		Authority precord = null;
		for (Annotation a : controllerAnnotations) {
			if (a instanceof KRequiresPermissions) {
				String aname = ((KRequiresPermissions) a).name();
				// precord = me.findByPropertity("aurl", controllerdKey);
				precord =  me.findFirst("select aname from k_authority where aname = ? and enabled = 0",aname);
				if (precord == null && controllerdKey.length() > 0) {
					precord = new Authority();
					precord.set("aurl", controllerdKey);
					precord.set("aname", aname);
					precord.set("aid", -100);
					precord.set("enabled", 0);
					precord.save();
				}
				break;
			}
		}

		for (Annotation a : methodAnnotations) {
			String aname = "";
			if (a instanceof KRequiresPermissions) {
				aname = ((KRequiresPermissions) a).name();
			} else {
				continue;
			}
			// Authority record = me.findByPropertity("aurl", methodKey);
			Authority record =  me.findFirst("select aname from k_authority where aname = ? and enabled = 0",aname);
			if (record != null && precord != null) {
				record.set("paid", precord.get("aid"));
				record.set("aname", aname);
				record.set("enabled", 0);
				record.update();
			} else {

				record = new Authority();
				if (precord != null)
					record.set("paid", precord.get("aid"));
				record.set("aurl", methodKey);
				record.set("aname", aname);
				record.set("aid", -100);
				record.set("enabled", 0);
				record.save();
			}
		}
	}

	/**
	 * 设定Shiro权限
	 * 
	 * @return
	 */
	public ConcurrentMap<String, String> findAuthority() {
		ConcurrentMap<String, String> keyMaps = new ConcurrentHashMap<>();
		List<Authority> list = findListByPropertity("enabled", "0");
		for (Authority au : list) {
			keyMaps.put(au.getStr("aname"), au.getStr("aurl"));
		}
		return keyMaps;
	}

	public void deleteAll() {
		String sql = "update " + tableName + " set enabled=1";
		Db.update(sql);
	}
}
