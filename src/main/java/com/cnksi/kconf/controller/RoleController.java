package com.cnksi.kconf.controller;

import com.cnksi.kconf.KConfig;
import com.cnksi.kconf.controller.vo.RoleQuery;
import com.cnksi.kconf.model.*;
import com.cnksi.shiro.ShiroDbRealm;
import com.jfinal.core.Controller;
import com.jfinal.core.Injector;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Record;

import java.util.HashMap;
import java.util.List;

/**
 * Generated by JFinal.
 */
public class RoleController extends Controller {
	public void index() {
		RoleQuery queryParam = Injector.injectBean(RoleQuery.class, null, getRequest(), false);

		setAttr("page", Role.me.paginate(queryParam));
		setAttr("query", queryParam);
		render("role.jsp");
	}

	/**
	 * 配置菜单
	 */
	public void confMenu() {

		String idValue = getPara("id", null);
		if (StrKit.notBlank(idValue)) {
			Role role = Role.me.findById(idValue);

			List<Record> menuRecords = RoleMenu.me.findMenuIdsByRoleId("role_id", idValue);

			setAttr("menuids", ListToString(menuRecords, "menuid"));
			setAttr("record", role);
		}

		List<Menu> menuList = Menu.me.findMenu("parent", null); // 查询父级菜单

		setAttr("menuList", menuList);

		List<Menu> menuModuleList = Menu.me.findMenu("module", null); // 查询父级菜单

		setAttr("moduleList", menuModuleList);
		
		render("role_menu.jsp");
	}

	/**
	 * 配置权限
	 */
	public void confAuthority() {

		String idValue = getPara("id", null);
		if (StrKit.notBlank(idValue)) {
			Role role = Role.me.findById(idValue);
			List<Record> authorityRecords = RoleAuthority.me.findAuthorityIdsByRoleId("rid", idValue);

			setAttr("authorityids", ListToString(authorityRecords, "aid"));
			setAttr("record", role);
		}

		List<Authority> authorityList = Authority.me.findParentResouce(); // 查询所有父级权限

		setAttr("authorityList", authorityList);

		render("role_authority.jsp");
	}

	public void save() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String[] menuids = getParaValues("menuid");
		String[] authorityids = getParaValues("authorityid");

		Role record = getModel(Role.class, "record");
		if (record.get("id") != null) {
			record.update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "更新成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "role-list");
		} else {
			record.set(record.getPkName(), -100);
			record.save();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "保存成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "role-list");
		}

		try {
			// 保存角色可操作的菜单
			String roleid = record.get("id").toString();
			RoleMenu roleMenu = null;
			if (menuids != null && menuids.length > 0) {
				RoleMenu.me.deleteByRoleid("role_id", roleid);
				for (String menuid : menuids) {
					roleMenu = new RoleMenu();
					roleMenu.set(roleMenu.getPkName(), -100);
					roleMenu.set("role_id", roleid);
					roleMenu.set("menuid", menuid);

					roleMenu.save();
				}
			}

			// 保存角色可操作的权限
			RoleAuthority roleAuthority = null;
			if (authorityids != null && authorityids.length > 0) {
				RoleAuthority.me.deleteByRoleid("rid", roleid);
				for (String authorityid : authorityids) {
					roleAuthority = new RoleAuthority();
					roleAuthority.set(roleAuthority.getPkName(), -100);
					roleAuthority.set("rid", roleid);
					roleAuthority.set("aid", authorityid);

					roleAuthority.save();
				}
			}

			ShiroDbRealm.instance.clearAllCachedAuthorizationInfo();

		} catch (Exception e) {
			e.printStackTrace();
		}

		renderJson(resultMap);
	}

	public void delete() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		Role record = Role.me.findById(getPara("id"));
		if (record != null) {
			record.set("enabled", 1).update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "删除成功");
			resultMap.put("closeCurrent", false);
			renderJson(resultMap);
		} else {
			resultMap.put("statusCode", "300");
			resultMap.put("message", "删除失败");
			resultMap.put("closeCurrent", false);
			resultMap.put("tabid", "");
			renderJson(resultMap);
		}
	}

	/**
	 * 将一个list转换为String,中间用”,“分割
	 * 
	 * @param array
	 * @return
	 */
	private String ListToString(List<Record> list, String value) {
		String result = "";
		if (list != null && list.size() > 0) {
			result = ",";
			for (Record r : list) {
				if (StrKit.notBlank(r.get(value).toString())) {
					result = result + r.get(value) + ",";
				}
			}
		}
		return result;
	}

	/**
	 * JSON
	 * 
	 * @return
	 */
	public void json() {
		User loginUser = getSessionAttr(KConfig.SESSION_USER_KEY);
		Object role_id = loginUser.get("role_id");
		List<Record> lookups = Role.me.findJson(role_id);
		renderJson(lookups);
	}

}
