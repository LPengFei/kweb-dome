package com.cnksi.kconf.controller;

import com.cnksi.kconf.KConfig;
import com.cnksi.kconf.controller.vo.DepartmentQuery;
import com.cnksi.kconf.model.Department;
import com.cnksi.kconf.model.Lookup;
import com.cnksi.kconf.model.User;
import com.cnksi.kcore.jfinal.model.BaseModel.Logical;
import com.cnksi.kcore.jfinal.model.KModel;
import com.cnksi.kcore.utils.PinyinUtil;
import com.cnksi.utils.IConstans;
import com.jfinal.aop.Before;
import com.jfinal.core.Injector;
import com.jfinal.kit.JsonKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
import org.apache.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Generated by JFinal.
 */
public class DepartmentController extends ModelController {
	private final static Logger logger = Logger.getLogger(DepartmentController.class);

	/**
	 * 部门类型
	 * 
	 * @author joe
	 *
	 */
	public enum DepartmentType {
		benbu, chejian, jiceng, keshi, banzu
	}

	public void index() {

		KModel model = KModel.me.findByTableName("k_department");
		super.doIndex(model, null);

		Long deptId = getSessionAttr("user_dept_id");
		removeSessionAttr("user_dept_id");
		if (null != deptId) {
			setAttr("user_dept_id", deptId);
		}
		DepartmentQuery queryParam = Injector.injectBean(DepartmentQuery.class, null, getRequest(), false);
		if(queryParam!=null) {
			setAttr("page", Department.me.paginate(queryParam));
			setAttr("query", queryParam);
		}
		render("department_list.jsp");
	}
	public void lookup(){
		//默认显示当前部门下的部门数据
		KModel model = KModel.me.findByTableName("k_department");
		super.doIndex(model, null);
		DepartmentQuery query = Injector.injectBean(DepartmentQuery.class, null, getRequest(), false);
		String dname = getPara("dname");
		if(StrKit.notBlank(dname)){
			query.setDname(null);
			query.addFilter(" (dname like '%"+dname+"%' or pinyin like '%"+dname+"%')  ");
			setAttr("dname",dname);
		}
        else{
             query.addFilter(" (id = "+getUserDept().get("id")+"  or pid =  "+getUserDept().get("id")+")");
		}
        setAttr("page",Department.me.paginate(query));

		setAttr("modelName","department");
		setAttr("modelmethod","lookup");
		render("department_search.jsp");
	}

	public void allDepartment(){
		//默认显示当前部门下的部门数据
		KModel model = KModel.me.findByTableName("k_department");
		super.doIndex(model, null);
		DepartmentQuery query = Injector.injectBean(DepartmentQuery.class, null, getRequest(), false);
		String dname = getPara("dname");
		if(StrKit.notBlank(dname)){
			query.setDname(null);
			query.addFilter(" (dname like '%"+dname+"%' or pinyin like '%"+dname+"%')  ");
			setAttr("dname",dname);
		}
		setAttr("page",Department.me.paginate(query));

		setAttr("modelName","department");
		setAttr("modelmethod","allDepartment");
		render("department_search.jsp");
	}

	/**
	 *树形部门查找带回
	 */
	public void ztreeDepartLookup() {
		if(getUserDept()!=null)
			setAttr("user_dept_id", getUserDept().getLong(IConstans.ID));
		List<Record> record = Department.me.findAllDeptTree();
		if (record != null && record.size() > 0)
			record.get(0).set("open", true);
		setAttr("ztreedata", JsonKit.toJson(record));
		keepPara();
		render("department_ztree_lookup.jsp");
	}

	/*public void deptLookup(){
		String type  = getPara(IConstans.TYPE);
		Long deptId = getUserDept().get(IConstans.ID);
		List<ReportCount> reportCounts = ReportCount.me.find("SELECT d.*, SUM(r.count) AS allCount FROM e_report_count r LEFT JOIN k_department d " +
				"ON d.id = r.`to_dept_id` WHERE r.from_dept_id = ? AND r.enabled = 0 AND d.`enabled` =0 AND r.type = ? GROUP BY r.to_dept_id ORDER BY SUM(r.count) DESC LIMIT 3", deptId,type);
		reportCounts.forEach(record->{
			if(StrKit.notNull(record.getLong(IConstans.PID))){
				Department dept = Department.me.findById(record.getLong(IConstans.PID));
				record.put("dept_pid",dept==null?"":dept.getName());
			}
			if(StrKit.notNull(record.getLong(IConstans.JCDWID))){
				Department dept = Department.me.findById(record.getLong(IConstans.JCDWID));
				record.put("dept_jcdwid",dept==null?"":dept.getName());
			}
			if(StrKit.notBlank(record.getStr(IConstans.TYPE))){
			    Lookup lookup = Lookup.me.findByTypeidAndKey("department_type",record.getStr(IConstans.TYPE));
			    if(lookup!=null){
			    	record.set("type",lookup.getValue());
				}
			}
			if(StrKit.notNull(record.getStr(IConstans.NATURE))){
				Lookup lookup = Lookup.me.findByTypeidAndKey("department_nature",record.getStr(IConstans.NATURE));
				if(lookup!=null){
					record.put(IConstans.NATURE,lookup.getValue());
				}
			}


		});
		setAttr("reportCounts", reportCounts);
		render("department_lookup.jsp");
	}*/

    public void view(){
       Long dept_id = getParaToLong("dept_id");
       Department department = Department.me.findById(dept_id);
       if(department.getLong("pid")!=null){
       	   Department parent = Department.me.findById(department.getLong("pid"));
       	   department.set("pid",parent.get("dname"));
	   }
	   if(department.get("type")!=null){
       	   department.set("type", Lookup.me.findByTypeidAndKey("department_type", department.getStr("type")).getValue());
	   }
		if(department.get("nature")!=null){
			department.set("nature", Lookup.me.findByTypeidAndKey("department_nature", department.getStr("nature")).getValue());
		}
		if(department.getLong("jcdwid")!=null){
			Department jcdwidDept = Department.me.findById(department.getLong("jcdwid"));
			department.set("jcdwid",jcdwidDept.get("dname"));
		}
       setAttr("record",department);
       render("department_view.jsp");
	}

	public void edit() {

		super.doEdit(getKModel("26"));

		String idValue = getPara("dept_id", null);
		String pid = getPara("parent_id");
		Department department = null;
		if (StrKit.notBlank(idValue)) {
			department = Department.me.findById(idValue);
		} else {
			department = new Department();
			department.set("pid", pid);
		}
		setAttr("record", department);

		render("department_form.jsp");
	}

	@Before(Tx.class)
	public void save() {
		HashMap<String, Object> resultMap = new HashMap<>();
		Department record = getModel(Department.class, "record");
		// 如果部门的pid为1，则单位只能是本部、基层和车间
		if (null!=record.getLong("pid")&&1==record.getLong("pid")
				&& (StrKit.isBlank(record.getType())
				|| "benbu,jiceng,chejian".indexOf(record.getType())<0)) {
			resultMap.put("statusCode", "300");
			resultMap.put("message", "一级单位的类型必须为本部、基层或车间");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
			renderJson(resultMap);
			return;
		}


		record.set("pinyin", PinyinUtil.getPinYinHeadChar(record.get("dname")).toLowerCase());
		record.set("sort", record.get("sort", 0));// 为sort默认设置为0
		if (record.get("id") != null && record.get("id") != "") {
			if(StrKit.isBlank(record.getStr("plan_type"))){
				record.set("plan_type",null);
			}
			record.update();
			Db.update("update e_plan_auditconf set dept_name = ? where deptid =  ?",record.getStr(IConstans.DNAME),record.getLong(IConstans.ID));
			Db.update("update e_plan_auditconf set audit_deptname = ? where audit_deptid =  ?",record.getStr(IConstans.DNAME),record.getLong(IConstans.ID));
			resultMap.put("statusCode", "200");
			resultMap.put("message", "更新成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		} else {

			record.set("id", -100);
			record.save();
			resultMap.put("id", record.get("id"));
			resultMap.put("statusCode", "200");
			resultMap.put("message", "保存成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		}

		// 设定jcdwid: 如果当前部门的类型为keshi或banzu，则当前部门的jcdwid字段与它上级部门的jcdwid一致
		if (DepartmentType.banzu.toString().equals(record.get("type")) || DepartmentType.keshi.toString().equals(record.get("type"))) {
			if (null != record.getLong("pid")) {
				Department parent = Department.me.findById(record.getLong("pid"));
				if (parent != null) {
					record.set("jcdwid", parent.getLong("jcdwid"));
				}
			}
		} // 如果当前部门类型是基层单位则当前基层单位的jcdwid字段与自身的id一致
		else if (DepartmentType.jiceng.toString().equals(record.get("type")) || DepartmentType.chejian.toString().equals(record.get(IConstans.TYPE))) {
			record.set("jcdwid", record.get("id"));
		} else {
			// 本部的jcdwid为自身 by 李恒锋 2017-09-19
			record.set("jcdwid", record.get("id"));
		}
		// 根部门不能设置jcdwid和type
		if(null==record.getLong("pid")){
			record.set("type",null);
			record.set("jcdwid",null);
		}

		record.update();
        if(getUserDept().getLong(IConstans.ID).equals(record.getLong(IConstans.ID))){
			removeSessionAttr(KConfig.SESSION_DEPT_KEY);

			Subject subject = SecurityUtils.getSubject();
			Session session = subject.getSession(false);
			// TODO 设定Session过期时间毫秒,设置为负数则永不过期
			session.setTimeout(-1000 * 60 * 30); // 设定超时时间
			session.setAttribute(KConfig.SESSION_DEPT_KEY, record);
		}

		setSessionAttr("user_dept_id", record.get("id"));
		renderJson(resultMap);
	}

	@Before(Tx.class)
	public void delete() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		Department record = Department.me.findById(getPara("dept_id"));
		if (null != record) {
			List<Department> depts = Department.me.findByParentId(record.get("id"));
			if (depts.size() == 0) {
				User user = User.me.findByPropertity(new String[] { "enabled", "dept_id" }, new Object[] { "0", record.getLong("id") }, Logical.AND);
				if (user == null) {
					record.set("enabled", 1).update();
					//删除对应的审核流程
					Db.update("update e_plan_auditconf set enabled = 1 where deptid = ? or audit_deptid = ?",record.getLong("id"),record.getLong("id"));
					resultMap.put("statusCode", "200");
					resultMap.put("message", "删除成功");
					resultMap.put("closeCurrent", false);
					resultMap.put("pid", record.get("pid"));
					renderJson(resultMap);
				} else {
					resultMap.put("statusCode", "300");
					resultMap.put("message", "该部门已有用户存在，不能删除");
					resultMap.put("closeCurrent", false);
					resultMap.put("tabid", "");
					renderJson(resultMap);
				}
			} else {
				resultMap.put("statusCode", "300");
				resultMap.put("message", "该部门存在下级部门，不能删除");
				resultMap.put("closeCurrent", false);
				resultMap.put("tabid", "");
				renderJson(resultMap);
			}
		} else {
			resultMap.put("statusCode", "300");
			resultMap.put("message", "该部门不存在，删除失败");
			resultMap.put("closeCurrent", false);
			resultMap.put("tabid", "");
			renderJson(resultMap);
		}

	}

	public void json() {
		List<Record> departments = Department.me.findAllDeptTree();
		if (departments != null && departments.size() > 0)
			departments.get(0).set("open", true);
		renderJson(departments);
	}

	/**
	 * 查询所有基层单位
	 */
	public void json_jcdw() {
		Long beginTime = new Date().getTime();
		List<Record> departments = Department.me.findJcdwDept();
		renderJson(departments);
		Long endTime = new Date().getTime();
		logger.info("beginTime:"+beginTime+";endTime:"+endTime+";total:"+(endTime-beginTime));

	}

	public void byId() {
		Long id = getParaToLong("dept_id");
		List<Record> departments = null;
		if (null == id) {
			departments = Department.me.findAllDeptTree();
		} else {
			departments = Department.me.selectChidrenByParentId(id);
		}
		if (departments != null && departments.size() > 0)
			departments.get(0).set("open", true);
		renderJson(departments);
	}

	/**
	 * 查询主管单位
	 */
	public void zg_dept_json() {

		List<Department> departments = Department.me.find("SELECT short_name AS id,short_name AS name FROM k_department WHERE enabled = 0 AND is_zg_dept = '是'");
		renderJson(departments);
	}

	/**
	 * 初始化基层单位id
	 */
	public void initJcdwid() {
		// 将根单位的type和jcdwid置为空
		Db.update("update k_department set jcdwid=null, type=null where id=1");

		// 将所有的本部车间基层的基层单位id设为自身id，同时将所有下辖单位的基层单位id设为父单位的基层单位id
		List<Department> list = Department.me.find("select * from k_department where type in ('benbu','jiceng','chejian')");
		for (Department dep : list) {
			Long depid = dep.get("id");
			dep.set("jcdwid", depid);
			String childIds = Department.me.getChildLst(depid);
			Db.update("update k_department set jcdwid=" + depid + " where id in (" + childIds + ")");
		}
		HashMap<String, Object> resultMap = new HashMap<>();
		resultMap.put("statusCode", "200");
		resultMap.put("message", "初始化基层单位id成功");
		resultMap.put("closeCurrent", false);
		resultMap.put("tabid", "user-list");
		renderJson(resultMap);
	}

}
